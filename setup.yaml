AWSTemplateFormatVersion: 2010-09-09
Description: Your Delivery Template
Parameters:
  SNSTopicName:
    Type: String
    Description: Name of the SNS topic
    Default: delivery
  NotificationQueueName:
    Type: String
    Description: Name of the Notification Queue
    Default: notification
  InventoryQueueName:
    Type: String
    Description: Name of the Inventory Queue
    Default: inventory
  ShipmentQueueName:
    Type: String
    Description: Name of the Shipment Queue
    Default: shipment
  InstanceType:
    Type: String
    Description: EC2 instances size
    Default: t2.micro
  ImageId:
    Type: String
    Description: EC2 instances image id
    Default: ami-07ce6ac5ac8a0ee6f
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an EC2 KeyPair to enable SSH access to the instance
    Default: your-delivery
Resources:
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Ref SNSTopicName
      TopicName: !Ref SNSTopicName
  NotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref NotificationQueueName
  NotificationQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt NotificationQueue.Arn
      Protocol: sqs
      TopicArn: !Ref SNSTopic
      FilterPolicy:
        type:
          - NOTIFICATION
      FilterPolicyScope: MessageBody
  InventoryQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref InventoryQueueName
  InventoryQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt InventoryQueue.Arn
      Protocol: sqs
      TopicArn: !Ref SNSTopic
      FilterPolicy:
        type:
          - INVENTORY
      FilterPolicyScope: MessageBody
  ShipmentQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref ShipmentQueueName
  ShipmentQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt ShipmentQueue.Arn
      Protocol: sqs
      TopicArn: !Ref SNSTopic
      FilterPolicy:
        type:
          - SHIPMENT
      FilterPolicyScope: MessageBody
  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - Ref: NotificationQueue
        - Ref: InventoryQueue
        - Ref: ShipmentQueue
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SNSTopic
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: your-delivery-vpc
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: your-delivery-igw
  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTableBackend:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: your-delivery-rt-app
  RouteTableBackendDefaultIPv4:
    Type: "AWS::EC2::Route"
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTableBackend
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: InternetGateway
  RouteTableAssociationApp:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetBackend
      RouteTableId:
        Ref: RouteTableBackend
  SubnetBackend:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.16.0.0/27
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: your-delivery-sn-backend
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: A Security Group for Your Delivery VPC
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/32
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
  ProducerEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SubnetId: !Ref SubnetBackend
      SecurityGroupIds:
        - !Ref SecurityGroup
      KeyName: !Ref KeyPairName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo amazon-linux-extras install java-openjdk11 -y
          sudo yum install docker -y
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          cd /home/ec2-user
          mkdir your-delivery-producer
          cd your-delivery-producer
          export SNS_TOPIC_ARN="${SNSTopic}"
          echo "version: '3.7'
          services:
            your-delivery-producer:
              restart: on-failure
              image: jooki997/your-delivery-producer:1.0.0
              ports:
                - 8090:8090
              environment:
                - SPRING_ACTIVE_PROFILE=default
                - TOPIC_ARN=$SNS_TOPIC_ARN
                - ACCESS_KEY=ACCESS_KEY
                - SECRET_ACCESS_KEY=SECRET_ACCESS_KEY
              container_name: producer
          " > docker-compose.yaml
          sed "s/SNS_TOPIC_ARN/$SNS_TOPIC_ARN/g" -i docker-compose.yaml
          sudo /usr/local/bin/docker-compose up -d
  NotificationQueueConsumerEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SubnetId: !Ref SubnetBackend
      SecurityGroupIds:
        - !Ref SecurityGroup
      KeyName: !Ref KeyPairName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo amazon-linux-extras install java-openjdk11 -y
          sudo yum install docker -y
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          cd /home/ec2-user
          mkdir your-delivery-consumer
          cd your-delivery-consumer
          export SQS_NOTIFICATION_QUEUE_URL="${NotificationQueue}"
          echo "version: '3.7'
          services:
            your-delivery-producer:
              restart: on-failure
              image: jooki997/your-delivery-consumer:1.0.0
              ports:
                - 8095:8095
              environment:
                - SPRING_ACTIVE_PROFILE=default
                - QUEUE_URL=$SQS_NOTIFICATION_QUEUE_URL
                - ACCESS_KEY=ACCESS_KEY
                - SECRET_ACCESS_KEY=SECRET_ACCESS_KEY
              container_name: producer
          " > docker-compose.yaml
          sed "s/SQS_NOTIFICATION_QUEUE_URL/$SQS_NOTIFICATION_QUEUE_URL/g" -i docker-compose.yaml
          sudo /usr/local/bin/docker-compose up -d
